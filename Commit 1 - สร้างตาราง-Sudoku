import tkinter as tk
from tkinter import filedialog, messagebox
import random
import copy

class SudokuGame:
    BOARD_SIZE = 9
    SUBGRID_SIZE = 3

    def __init__(self, master):
        self.master = master
        self.master.title("Sudoku Game")

        # Create a canvas for drawing the grid
        self.canvas = tk.Canvas(master, width=450, height=450)
        self.canvas.pack()

        self.create_grid()
        self.cells = self.create_input_fields()
        self.board = [[0 for _ in range(self.BOARD_SIZE)] for _ in range(self.BOARD_SIZE)]
        self.solution = copy.deepcopy(self.board)
        self.fill_board(self.board)
        self.remove_numbers_from_board(self.board)
        self.update_cells(self.board)

        # Button to submit the answer
        self.submit_button = tk.Button(master, text="Submit Answer", command=self.submit_answer)
        self.submit_button.pack()

        # Button to reset the game
        self.reset_button = tk.Button(master, text="Reset Game", command=self.reset_board)
        self.reset_button.pack()

        # Button to save the game
        self.save_button = tk.Button(master, text="Save Game", command=self.save_game)
        self.save_button.pack()

        # Button to load the game
        self.load_button = tk.Button(master, text="Load Game", command=self.load_game)
        self.load_button.pack()

    def create_grid(self):
        for i in range(self.BOARD_SIZE + 1):
            line_width = 3 if i % self.SUBGRID_SIZE == 0 else 1
            self.canvas.create_line(0, i * 50, 450, i * 50, width=line_width)
            self.canvas.create_line(i * 50, 0, i * 50, 450, width=line_width)

    def create_input_fields(self):
        cells = [[tk.Entry(self.master, width=2, justify='center', font=('Arial', 18)) 
                  for _ in range(self.BOARD_SIZE)] for _ in range(self.BOARD_SIZE)]
        for i in range(self.BOARD_SIZE):
            for j in range(self.BOARD_SIZE):
                cells[i][j].place(x=j * 50 + 5, y=i * 50 + 5,
                                  width=40, height=40)
        return cells

    def fill_board(self, board):
        """Fill the board with a valid Sudoku solution."""
        def is_valid(board, row, col, num):
            for i in range(self.BOARD_SIZE):
                if board[row][i] == num or board[i][col] == num:
                    return False
            
            start_row, start_col = self.SUBGRID_SIZE * (row // self.SUBGRID_SIZE), self.SUBGRID_SIZE * (col // self.SUBGRID_SIZE)
            for i in range(self.SUBGRID_SIZE):
                for j in range(self.SUBGRID_SIZE):
                    if board[start_row + i][start_col + j] == num:
                        return False
            return True

        def solve(board):
            for row in range(self.BOARD_SIZE):
                for col in range(self.BOARD_SIZE):
                    if board[row][col] == 0:
                        nums = list(range(1, self.BOARD_SIZE + 1))
                        random.shuffle(nums)
                        for num in nums:
                            if is_valid(board, row, col, num):
                                board[row][col] = num
                                if solve(board):
                                    return True
                                board[row][col] = 0  # Backtrack
                        return False
            return True

        solve(board)

    def remove_numbers_from_board(self, board):
        """Randomly remove numbers from the board to create a playable Sudoku puzzle."""
        num_to_remove = 30  # Number of cells to remove
        removed = 0
        while removed < num_to_remove:
            row = random.randint(0, self.BOARD_SIZE - 1)
            col = random.randint(0, self.BOARD_SIZE - 1)
            if board[row][col] != 0:
                board[row][col] = 0
                removed += 1

    def update_cells(self, board):
        """Update the input fields with the current board state."""
        for i in range(self.BOARD_SIZE):
            for j in range(self.BOARD_SIZE):
                self.cells[i][j].config(state='normal', bg='white')
                self.cells[i][j].delete(0, tk.END)
                if board[i][j] != 0:
                    self.cells[i][j].insert(0, str(board[i][j]))
                    self.cells[i][j].config(state='disabled', disabledforeground='black')

    def reset_board(self):
        """Reset the board and create a new Sudoku puzzle."""
        self.board = [[0 for _ in range(self.BOARD_SIZE)] for _ in range(self.BOARD_SIZE)]
        self.solution = copy.deepcopy(self.board)
        self.fill_board(self.board)
        self.remove_numbers_from_board(self.board)
        self.update_cells(self.board)

    def save_game(self):
        """Save the current board state to a file."""
        file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt")])
        if file_path:
            try:
                with open(file_path, 'w') as f:
                    for i in range(self.BOARD_SIZE):
                        row = [self.cells[i][j].get() or '0' for j in range(self.BOARD_SIZE)]
                        f.write(" ".join(row) + "\n")
                messagebox.showinfo("Info", "Game saved successfully.")
            except Exception as e:
                messagebox.showerror("Error", f"Error saving the game: {str(e)}")

    def load_game(self):
        """Load a board state from a file."""
        file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt")])
        if file_path:
            try:
                with open(file_path, 'r') as f:
                    lines = f.readlines()
                    board = []
                    for line in lines:
                        row = list(map(int, line.strip().split()))
                        if len(row) != self.BOARD_SIZE:
                            raise ValueError("Each row must have exactly 9 numbers.")
                        board.append(row)

                    if len(board) != self.BOARD_SIZE:
                        raise ValueError("The board must have exactly 9 rows.")

                    self.update_cells(board)
                    messagebox.showinfo("Info", "Game loaded successfully.")
            except Exception as e:
                messagebox.showerror("Error", f"Error loading the game: {str(e)}")

    def submit_answer(self):
        """Check the player's answer against the solution."""
        user_input = [[int(self.cells[i][j].get() or '0') for j in range(self.BOARD_SIZE)] for i in range(self.BOARD_SIZE)]
        
        if self.check_solution(user_input):
            messagebox.showinfo("Correct!", "Your answer is correct!")
        else:
            self.highlight_incorrect(user_input)  # Highlight incorrect answers
            messagebox.showinfo("Incorrect", "Your answer is incorrect! Please try again.")

    def check_solution(self, user_input):
        """Compare user's input to the correct solution."""
        return user_input == self.solution

    def highlight_incorrect(self, user_input):
        """Highlight cells that contain incorrect answers."""
        for i in range(self.BOARD_SIZE):
            for j in range(self.BOARD_SIZE):
                if user_input[i][j] != self.solution[i][j] and user_input[i][j] != 0:
                    self.cells[i][j].config(bg='red')  # Highlight incorrect cells in red

if __name__ == "__main__":
    root = tk.Tk()
    game = SudokuGame(root)
    root.mainloop()
