import tkinter as tk  # นำเข้าโมดูล tkinter สำหรับการสร้าง GUI
import random  # นำเข้าโมดูล random เพื่อใช้ในการสุ่มค่า
import copy  # นำเข้าโมดูล copy เพื่อใช้ในการทำสำเนาอ็อบเจ็กต์ (ไม่ใช้งานในโค้ดนี้)

class SudokuGame:  # สร้างคลาส SudokuGame
    BOARD_SIZE = 9  # กำหนดขนาดของกระดาน Sudoku เป็น 9x9
    SUBGRID_SIZE = 3  # กำหนดขนาดของกล่องย่อยเป็น 3x3

    def __init__(self, master):  # ฟังก์ชันคอนสตรัคเตอร์ของคลาส
        self.master = master  # เก็บอ้างอิงของหน้าต่างหลัก
        self.master.title("Sudoku Game")  # ตั้งชื่อหน้าต่างหลัก

        # สร้าง canvas สำหรับวาดกริด
        self.canvas = tk.Canvas(master, width=450, height=450)  # สร้าง canvas ขนาด 450x450
        self.canvas.pack()  # แพ็ค canvas ลงในหน้าต่าง

        self.create_grid()  # เรียกฟังก์ชันเพื่อสร้างกริด Sudoku
        self.cells = self.create_input_fields()  # เรียกฟังก์ชันเพื่อสร้างฟิลด์ข้อมูล
        self.board = [[0 for _ in range(self.BOARD_SIZE)] for _ in range(self.BOARD_SIZE)]  # สร้างกระดาน Sudoku ที่ว่างเปล่า
        self.fill_board(self.board)  # เรียกฟังก์ชันเพื่อเติมกระดานด้วยการแก้ไข Sudoku ที่ถูกต้อง
        self.update_cells(self.board)  # อัปเดตฟิลด์ข้อมูลด้วยสถานะของกระดาน

    def create_grid(self):  # ฟังก์ชันสำหรับสร้างกริด
        for i in range(self.BOARD_SIZE + 1):  # ลูปสำหรับวาดเส้นแนวนอนและแนวตั้ง
            line_width = 3 if i % self.SUBGRID_SIZE == 0 else 1  # กำหนดความกว้างของเส้น
            self.canvas.create_line(0, i * 50, 450, i * 50, width=line_width)  # วาดเส้นแนวนอน
            self.canvas.create_line(i * 50, 0, i * 50, 450, width=line_width)  # วาดเส้นแนวตั้ง

    def create_input_fields(self):  # ฟังก์ชันสำหรับสร้างฟิลด์ข้อมูล
        cells = [[tk.Entry(self.master, width=2, justify='center', font=('Arial', 18)) 
                  for _ in range(self.BOARD_SIZE)] for _ in range(self.BOARD_SIZE)]  # สร้างฟิลด์ข้อมูลเป็นตาราง 9x9
        for i in range(self.BOARD_SIZE):  # ลูปสำหรับแต่ละแถว
            for j in range(self.BOARD_SIZE):  # ลูปสำหรับแต่ละคอลัมน์
                cells[i][j].place(x=j * 50 + 5, y=i * 50 + 5,  # ตั้งตำแหน่งของฟิลด์ข้อมูล
                                  width=40, height=40)  # กำหนดขนาดของฟิลด์ข้อมูล
        return cells  # คืนค่าตารางฟิลด์ข้อมูล

    def fill_board(self, board):  # ฟังก์ชันสำหรับเติมกระดานด้วยการแก้ไข Sudoku
        """Fill the board with a valid Sudoku solution."""  # คำอธิบายฟังก์ชัน

        def is_valid(board, row, col, num):  # ฟังก์ชันเพื่อตรวจสอบความถูกต้องของตัวเลข
            # ตรวจสอบว่า num ไม่อยู่ในแถวและคอลัมน์ปัจจุบัน
            for i in range(self.BOARD_SIZE):  # ลูปเพื่อตรวจสอบแถวและคอลัมน์
                if board[row][i] == num or board[i][col] == num:  # หากพบหมายเลขในแถวหรือคอลัมน์
                    return False  # คืนค่า False
            
            # ตรวจสอบว่า num ไม่อยู่ในกล่องย่อยปัจจุบัน
            start_row, start_col = self.SUBGRID_SIZE * (row // self.SUBGRID_SIZE), self.SUBGRID_SIZE * (col // self.SUBGRID_SIZE)  # คำนวณตำแหน่งเริ่มต้นของกล่องย่อย
            for i in range(self.SUBGRID_SIZE):  # ลูปเพื่อตรวจสอบกล่องย่อย
                for j in range(self.SUBGRID_SIZE):
                    if board[start_row + i][start_col + j] == num:  # หากพบหมายเลขในกล่องย่อย
                        return False  # คืนค่า False
            return True  # คืนค่า True หากหมายเลขถูกต้อง

        def solve(board):  # ฟังก์ชันในการแก้ปัญหา Sudoku
            for row in range(self.BOARD_SIZE):  # ลูปสำหรับแต่ละแถว
                for col in range(self.BOARD_SIZE):  # ลูปสำหรับแต่ละคอลัมน์
                    if board[row][col] == 0:  # หากช่องว่าง (0) พบหมายเลขที่ต้องเติม
                        nums = list(range(1, self.BOARD_SIZE + 1))  # สร้างรายการหมายเลข 1-9
                        random.shuffle(nums)  # สุ่มหมายเลขเพื่อให้เกิดความสุ่ม
                        for num in nums:  # ลูปผ่านหมายเลขที่สุ่ม
                            if is_valid(board, row, col, num):  # ตรวจสอบความถูกต้อง
                                board[row][col] = num  # เติมหมายเลขลงในช่อง
                                if solve(board):  # เรียกฟังก์ชันแก้ปัญหา
                                    return True  # หากแก้ปัญหาได้คืนค่า True
                                board[row][col] = 0  # ถ้าไม่สามารถแก้ได้ กลับสู่สถานะก่อนหน้า (backtrack)
                        return False  # คืนค่า False หากไม่สามารถเติมหมายเลขได้
            return True  # คืนค่า True หากกระดานถูกเติมอย่างถูกต้อง

        solve(board)  # เรียกฟังก์ชันแก้ปัญหาเพื่อเติมกระดาน

    def update_cells(self, board):  # ฟังก์ชันสำหรับอัปเดตฟิลด์ข้อมูล
        """Update the input fields with the current board state."""  # คำอธิบายฟังก์ชัน
        for i in range(self.BOARD_SIZE):  # ลูปสำหรับแต่ละแถว
            for j in range(self.BOARD_SIZE):  # ลูปสำหรับแต่ละคอลัมน์
                self.cells[i][j].config(state='normal', bg='white')  # กำหนดสถานะเป็น 'normal' และพื้นหลังเป็นสีขาว
                self.cells[i][j].delete(0, tk.END)  # ลบค่าปัจจุบันในฟิลด์ข้อมูล
                if board[i][j] != 0:  # หากมีหมายเลขในช่อง
                    self.cells[i][j].insert(0, str(board[i][j]))  # แทรกหมายเลขลงในฟิลด์ข้อมูล
                    self.cells[i][j].config(state='disabled', disabledforeground='black')  # กำหนดสถานะเป็น 'disabled' เพื่อไม่ให้แก้ไข

if __name__ == "__main__":  # ตรวจสอบว่าไฟล์ถูกเรียกใช้งานโดยตรง
    root = tk.Tk()  # สร้างหน้าต่างหลัก
    game = SudokuGame(root)  # สร้างอ็อบเจ็กต์ของคลาส SudokuGame
    root.mainloop()  # เริ่มต้นลูปหลักของ Tkinter
